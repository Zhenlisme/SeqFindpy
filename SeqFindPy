import numpy as np
from Bio import SeqIO
import pandas as pd
import argparse,os,re,gc,sys

parser=argparse.ArgumentParser(description="To get the location and anotation of a sequence. First-writtern@20190716 by ZhenLi.")
parser.add_argument("-f","--fasta",required=True,type=str,help="The genome sequence,fasta format.")
parser.add_argument("-k","--matchkey",type=str,default="",help="type in the key pattern.")
ano_group=parser.add_mutually_exclusive_group()
ano_group.add_argument("-g","--gff",type=str,default="",help="The anotation file,gff3 format.")
ano_group.add_argument("-b","--bed",type=str,default="",help="The anotation file,bed format.")

parser.add_argument("-o","--optfile",type=str,default="",help="The filename of output result.")
parser.add_argument("-l","--location",type=str,default="",help="The start and end of the sequence you wanna find. Example:205-225")
parser.add_argument("-n","--ncnumber",type=str,default="",help="The sequence id.")
parser.add_argument("-m","--method",type=str,default="bedtools",choices=["bedtools","selftools"],
                   help="choice the method of intersecting method.")

parser.add_argument("-ep","--expression_p",type=str,default="",help="The reqular expression applying on positive strand. Example:'ATCGAA{2,3}A'")
parser.add_argument("-en","--expression_n",type=str,default="",help="The reqular expression applying on negative strand. Example:'ATCGAA{2,3}A'")
args=vars(parser.parse_args())

def seqmatch(genome_dict,pattern,strand):
    if args["ncnumber"]:
        genome_dict={args["ncnumber"]:genome_dict[args["ncnumber"]]}
    opline=[]
    for key in genome_dict:
        for i in pattern.finditer(str(genome_dict[key])):
            seq=i.group()
            sys.stdout.write("\t".join([key,str(i.start()+1),str(i.end()),strand,seq]))
            sys.stdout.write("\n")
            opline.append([key,i.start()+1,i.end(),strand,seq])
    return opline
def bedtools_intersect(seqlocation,anotation):
    seqlocation.to_csv(os.path.abspath(".seqlocation"),header=False,index=False,sep="\t")
    os.system("sort -k1,1 -k2,2n %s > %s" % (os.path.abspath('.seqlocation'), os.path.abspath('.sorted_seqlocation')))
    anotation.to_csv(os.path.abspath(".anotation"),header=False,index=False,sep="\t")
    os.system("sort -k1,1 -k2,2n %s > %s" % (os.path.abspath('.anotation'), os.path.abspath('.sorted_anotation')))
    if not args["optfile"]:
        os.system("bedtools intersect -a %s -b %s -wo" % (os.path.abspath(".sorted_seqlocation"), os.path.abspath(".sorted_anotation")))
    else:
        os.system("bedtools intersect -a %s -b %s -wo > %s" % (
                  os.path.abspath(".sorted_seqlocation"), os.path.abspath(".sorted_anotation"), os.path.abspath(args["optfile"])))
    os.system("rm -f %s " % (os.path.abspath(".*ation")))    

def selfmade_intersect(seqlocation,anotation):
    anotation.columns=["nc","start","end","anotation"]
    anotation.start,anotation.end=pd.to_numeric(anotation.start),pd.to_numeric(anotation.end)
    if args["optfile"]:
        opnp=np.array(["nc","start","end","anotation","seqstart","seqend","seq"])
        for idx in seqlocation.index:
            seqstart,seqend=seqlocation.iloc[idx,[1,2]]
            df=anotation.loc[(anotation.nc==seqlocation.iloc[idx,0]) & (seqend>anotation.start) & (anotation.end>seqstart),:]
            if len(df)!=0:
                seqnp=seqlocation.iloc[idx,[1,2,3]].to_list()
                seqnp=np.asarray([seqnp for i in range(len(df))])
                opstrings=np.hstack((df.to_numpy(),seqnp))
                opnp=np.vstack((opnp,opstrings))
                [sys.stdout.write("\t".join(str(x) for x in i)+"\n") for i in np.hstack((df.to_numpy(),seqnp)).tolist()]
        opdf=pd.DataFrame(opnp).drop_duplicates()
        opdf.to_csv(os.path.abspath(args["optfile"]),header=False,index=False)
    else:
        for idx in seqlocation.index:
            seqstart,seqend=seqlocation.iloc[idx,[1,2]]
            df=anotation.loc[(anotation.nc==seqlocation.iloc[idx,0]) & (seqend>anotation.start) & (anotation.end>seqstart),:]
            if len(df)!=0:
                seqnp=seqlocation.iloc[idx,[1,2,3]].to_list()
                seqnp=np.asarray([seqnp for i in range(len(df))])
                [sys.stdout.write("\t".join(str(x) for x in i)+"\n") for i in np.hstack((df.to_numpy(),seqnp)).tolist()]

def SeqLocation(genomefile,opfile):
    if args["matchkey"]:
        keypattern=re.compile(args["matchkey"],re.I)
        genome_dict = {re.findall(keypattern,seq_record.id)[0]:seq_record.seq for seq_record in SeqIO.parse(os.path.abspath(genomefile), "fasta")}
    else:
        genome_dict = {seq_record.id: seq_record.seq for seq_record in SeqIO.parse(os.path.abspath(genomefile), "fasta")}
    if args["ncnumber"]:
        genome_dict=genome_dict[args["ncnumber"]]
    if args["location"]:
        start,end=args["location"].split("-")
        sys.stdout.write(str(genome_dict)[int(start)-1:int(end)]+"\n")
        exit(0)
    if args["expression_p"]:
        pattern=re.compile(args["expression_p"],re.I)
        seqlocation=pd.DataFrame(seqmatch(genome_dict,pattern,"positive"))
    if args["expression_n"]:
        pattern=re.compile(args["expression_n"],re.I)
        if args["expression_p"]:
            seqlocation=seqlocation.append(pd.DataFrame(seqmatch(genome_dict,pattern,"negative")))
        else:
            seqlocation=pd.DataFrame(seqmatch(genome_dict,pattern,"negative"))
    del genome_dict
    gc.collect()
    sys.stdout.write("****"*71+"\n")
    anolist=[]
    if args["gff"]:
        with open(os.path.abspath(args["gff"]),'r') as F:
            for line in F:
                if not re.match(r'^[#\s]',line):
                    if line.split("\t")[2]!="region":
                        anolist.append([line.split("\t")[0],line.split("\t")[3],line.split("\t")[4],
                                        ";".join([line.split("\t")[2],line.split("\t")[6],line.rstrip().split("\t")[8]])])
    elif args["bed"]:
        with open(os.path.abspath(args["bed"]),'r') as F:
            [anolist.append([line.split("\t")[0],line.split("\t")[1],line.split("\t")[2],";".join(line.rstrip().split("\t")[3:])]) for line in F]
    else:
        if opfile:
            seqlocation.to_csv(os.path.abspath(opfile),header=False,index=False)
        exit(0)

    anotation=pd.DataFrame(anolist)
    if args["method"]=="bedtools":
        bedtools_intersect(seqlocation,anotation)
    else:
        selfmade_intersect(seqlocation,anotation)

if __name__=="__main__":
    SeqLocation(genomefile=args["fasta"],opfile=args["optfile"])
